desc: Test certain types of item queue changes on limit changefeeds.
table_variable_name: tbl
tests:

    - py: tbl.insert([{'id': 1, 'v': 1}, {'id': 2, 'v': 2}, {'id': 3, 'v': 3}])
      ot: partial({'inserted': 3})
    - py: tbl.index_create('v')
      ot: partial({'created': 1})
    - py: tbl.index_wait('v')
      ot: [partial({'ready': True})]

    - py: asc = tbl.order_by(index="v").pluck('id').limit(1).changes(include_states=True, include_initial=True)
    - py: fetch(asc, 3, timeout=1)
      ot: [{'state': 'initializing'}, {'new_val': {'id': 1}}, {'state': 'ready'}]

    - py: desc = tbl.order_by(index=r.desc("v")).pluck('id').limit(1).changes(include_states=True, include_initial=True)
    - py: fetch(desc, 3, timeout=1)
      ot: [{'state': 'initializing'}, {'new_val': {'id': 3}}, {'state': 'ready'}]

    - py: pasc = tbl.order_by(index="id").pluck('id').limit(1).changes(include_states=True, include_initial=True)
    - py: fetch(pasc, 3, timeout=1)
      ot: [{'state': 'initializing'}, {'new_val': {'id': 1}}, {'state': 'ready'}]

    - py: pdesc = tbl.order_by(index=r.desc("id")).pluck('id').limit(1).changes(include_states=True, include_initial=True)
    - py: fetch(pdesc, 3, timeout=1)
      ot: [{'state': 'initializing'}, {'new_val': {'id': 3}}, {'state': 'ready'}]

    # Update element currently in item_queue so that it moves out of the queue
    - py: tbl.get(1).update({'v': 5})
      ot: partial({'replaced': 1})
    - py: fetch(asc, 1)
      ot: [{'old_val': {'id': 1}, 'new_val': {'id': 2}}]
    - py: fetch(desc, 1)
      ot: [{'old_val': {'id': 3}, 'new_val': {'id': 1}}]
    # ... and back
    - py: tbl.get(1).update({'v': 1})
      ot: partial({'replaced': 1})
    - py: fetch(asc, 1)
      ot: [{'old_val': {'id': 2}, 'new_val': {'id': 1}}]
    - py: fetch(desc, 1)
      ot: [{'old_val': {'id': 1}, 'new_val': {'id': 3}}]

    # Replace element currently in item_queue by a new document that's too large
    # in a single transaction (hopefully).
    # We insert a bunch of new documents to make it likely that we hit the hash
    # shard that we removed the old document from.
    - py: tbl.insert(r.expr([{'id': 1, 'v': 5}]).add(r.range(10, 100).map(lambda i: {'id': i, 'v': i}).coerce_to('array')), conflict=(lambda: None))
      ot: partial({'deleted': 1, 'inserted': 90})
    - py: fetch(asc, 1)
      ot: [{'old_val': {'id': 1}, 'new_val': {'id': 2}}]
    - py: fetch(pasc, 1)
      ot: [{'old_val': {'id': 1}, 'new_val': {'id': 2}}]
