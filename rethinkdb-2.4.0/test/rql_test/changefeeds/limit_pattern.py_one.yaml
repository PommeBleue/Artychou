desc: Test patterns that are likely to trigger edge cases on limit changefeeds
table_variable_name: tbl
tests:

    - py: tbl.insert([{'id': 1, 'v': 1}, {'id': 2, 'v': 2}, {'id': 3, 'v': 3}])
      ot: partial({'inserted': 3})
    - py: tbl.index_create('v')
      ot: partial({'created': 1})
    - py: tbl.index_wait('v')
      ot: [partial({'ready': True})]

    - py: asc = tbl.order_by(index="v").pluck('id').limit(1).changes(include_states=True, include_initial=True)
    - py: fetch(asc, 3, timeout=1)
      ot: [{'state': 'initializing'}, {'new_val': {'id': 1}}, {'state': 'ready'}]

    - py: desc = tbl.order_by(index=r.desc("v")).pluck('id').limit(1).changes(include_states=True, include_initial=True)
    - py: fetch(desc, 3, timeout=1)
      ot: [{'state': 'initializing'}, {'new_val': {'id': 3}}, {'state': 'ready'}]

    - py: pasc = tbl.order_by(index="id").pluck('id').limit(1).changes(include_states=True, include_initial=True)
    - py: fetch(pasc, 3, timeout=1)
      ot: [{'state': 'initializing'}, {'new_val': {'id': 1}}, {'state': 'ready'}]

    - py: pdesc = tbl.order_by(index=r.desc("id")).pluck('id').limit(1).changes(include_states=True, include_initial=True)
    - py: fetch(pdesc, 3, timeout=1)
      ot: [{'state': 'initializing'}, {'new_val': {'id': 3}}, {'state': 'ready'}]

    # The following tests all make assumptions about the order in which batch inserts are processed.
    # This is theoretically undefined. Maybe these tests should be C++ unit tests against the limit_manager_t?

    # Add, then delete (asc)
    - py: tbl.insert([{'id': 0, 'v': 0}, {'id': 0}], conflict=(lambda: None))
      ot: partial({'inserted': 1, 'deleted': 1})
    - py: fetch(asc, 2)
      ot: [{'new_val': {'id': 0}, 'old_val': {'id': 1}}, {'new_val': {'id': 1}, 'old_val': {'id': 0}}]
    - py: fetch(desc)
      ot: []
    - py: fetch(pasc)
      ot: []
    - py: fetch(pdesc)
      ot: []

    # Add, then delete (desc)
    - py: tbl.insert([{'id': 5, 'v': 5}, {'id': 5}], conflict=(lambda: None))
      ot: partial({'inserted': 1, 'deleted': 1})
    - py: fetch(asc)
      ot: []
    - py: fetch(desc, 2)
      ot: [{'new_val': {'id': 5}, 'old_val': {'id': 3}}, {'new_val': {'id': 3}, 'old_val': {'id': 5}}]
    - py: fetch(pasc)
      ot: []
    - py: fetch(pdesc)
      ot: []

